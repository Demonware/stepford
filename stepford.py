import logging

from functools import wraps
try:
    from urllib2 import urlopen, HTTPError
    from urllib import urlencode
    from urlparse import parse_qsl
except ImportError:
    from urllib.request import urlopen
    from urllib.parse import urlencode, parse_qsl
    from urllib.error import HTTPError
try:
    import simplejson as json
except ImportError:
    import json

_URIROOT = 'https://graph.facebook.com'

# as documented @ https://developers.facebook.com/docs/test_users/
API_EC_TEST_ACCOUNTS_CANT_DELETE = 2903
API_EC_TEST_ACCOUNTS_CANT_REMOVE_APP = 2902
API_EC_TEST_ACCOUNTS_INVALID_ID = 2901
API_EC_TEST_ACCOUNTS_TOO_MANY = 2900

# other errors encountered
API_EC_UNABLE_TO_ACCESS_APPLICATION = 200

_log = logging.getLogger(__name__)

class FacebookError(HTTPError):
    """ Exposes Facebook-specific error attributes
    """
    def __init__(self, err):
        data = json.loads(err.fp.read().decode())['error']
        HTTPError.__init__(self, err.url, err.code, data['message'], 
            err.headers, err.fp)
        
        self.api_code = data['code'] 
        """ The client-facing Facebook error code """

        self.type = data['type']
        """ Error type """

def translate_http_error(fn):
    """ HTTPError to FacebookError translation decorator
    
    Decorates functions, handles :py:class:`urllib2.HTTPError` exceptions and
    translates them into :class:`stepford.FacebookError`

    :param fn: The function to decorate with translation handling
    """
    @wraps(fn)
    def inner(*args, **kwargs):
        try:
            return fn(*args, **kwargs)
        except HTTPError as e:
            raise FacebookError(e)
    return inner


@translate_http_error
def app_token(client_id, client_secret):
    """ Gets the app token

    The app token is used in all ``stepford`` transactions. It is provided by
    Facebook and only changes when your app secret has been changed.

    :param client_id: Your app's client ID, as provided by Facebook
    :param client_secret: Your app's client secret, as provided by Facebook
    """
    resp = urlopen('{}/oauth/access_token?{}'.format(_URIROOT, urlencode({
        'client_id': client_id,
        'client_secret': client_secret,
        'grant_type': 'client_credentials',
    })))

    return dict(parse_qsl(resp.read().decode()))['access_token']


@translate_http_error
def get(client_id, access_token):
    """ Gets a list of available test users

    :param client_id: Your app's client ID, as provided by Facebook
    :param access_token: Your app's access_token, as retrieved by ``app_token``
                         (alternatively, this can be retrieved by Facebook's
                         testing toolset).
    """
    resp = urlopen('{}/{}/accounts/test-users?{}'.format(_URIROOT, 
        client_id, urlencode({'access_token': access_token})))
    
    return json.loads(resp.read().decode())['data']


@translate_http_error
def create(client_id, access_token, installed=True, name=None,
                locale='en_US', permissions='read_stream'):
    """ Creates a test user

    :param client_id: Your app's client ID, as provided by Facebook
    :param access_token: Your app's access_token, as retrieved by ``app_token``
                         (alternatively, this can be retrieved by Facebook's
                         testing toolset).
    :param installed: Whether or not the user should be created with your app
                      installed.
    :param name: The name of the test user. If ``None``, this will be
                 auto-generated by Facebook.
    :param locale: The user's default locale.
    :param permissions: The scope approved by the test user. This should be a
                        comma-delimited list of resource types approved by this
                        user for your application.
    """
    resp = urlopen('{}/{}/accounts/test-users?{}'.format(
        _URIROOT,
        client_id,
        urlencode({
            'installed': installed,
            'locale': locale,
            'permissions': permissions,
            'method': 'post',
            'access_token': access_token,
        })))

    return json.loads(resp.read().decode())


@translate_http_error
def delete(userid, client_id, access_token):
    """ Deletes a test user

    :param userid: The ID of the user to delete.
    :param client_id: Your app's client ID, as provided by Facebook
    :param access_token: Your app's access_token, as retrieved by ``app_token``
                         (alternatively, this can be retrieved by Facebook's
                         testing toolset).
    """
    resp = urlopen('{}/{}?{}'.format(_URIROOT, userid, urlencode({
        'method': 'delete',
        'access_token': access_token,
    })))
 
    return resp.read() == b'true'


@translate_http_error
def connect(*users):
    """ Creates friendships between test user accounts

    :param users: A list of users to create friendships for.
    """
    if len(users) <= 1:
        raise ValueError('len(users) must be > 1')

    def _connect(a, b):
        return urlopen('{}/{}/friends/{}?{}'.format(_URIROOT,
            a['id'], b['id'], urlencode({
                'access_token': a['access_token'],
                'method': 'post'
            })))

    for idx, a in enumerate(users[:-1]):
        for b in users[idx + 1:]:
            _connect(a, b)
            _connect(b, a)


@translate_http_error
def update(userid, access_token, name=None, pwd=None):
    """ Updates the given user

    :param userid: The ID of the user to be updated
    :param access_token: The app access token
    :param name (optional): If specified, what name to assign to the user
    :param pwd (optional): If specified, what password to assign to the user

    :return: True on success
    """
    qs = {
        'method': 'post',
        'access_token': access_token,
    }
    if name is not None:
        qs['name'] = name

    if pwd is not None:
        qs['password'] = pwd

    resp = urlopen('{}/{}?{}'.format(_URIROOT, userid, urlencode(qs)))
    return resp.code == 200


@translate_http_error
def install(userid, install_to_token, clientid, access_token, scope=None):
    """ Installs an app for the given user

    :param userid: The user to install the app for
    :param install_to_token: The app token for the app being installed
    :param clientid: The client_id of the app that owns the test user
    :param access_token: The app token of the app that owns the test user
    :param scope: The scope to install the app for the test user with
    """
    qs = {
        'installed': 'true',
        'uid': userid,
        'owner_access_token': access_token,
        'access_token': install_to_token,
        'method': 'post',
    }
    if scope is not None:
        qs['scope'] = scope

    resp = urlopen('{}/{}/accounts/test-users?{}'.format(_URIROOT,
        clientid, urlencode(qs)))
    return resp.code == 200


@translate_http_error
def uninstall(userid, clientid, access_token):
    """ Uninstalls an app for the given user

    :param userid: The user to uninstall the app for
    :param clientid: The client id of the app being removed
    :param access_token: The access token of the app being removed
    """
    resp = urlopen('{}/{}/accounts/test-users?{}'.format(_URIROOT,
        clientid, urlencode({
            'access_token': access_token,
            'method': 'delete',
            'uid': userid,
        })))
    return resp.code == 200
